import {
  getCompilerList,
  getContract,
  verifyContract,
} from "@Redux/actions/address";
import { useDispatch, useSelector } from "react-redux";

import AppLayout from "@Components/Layout/AppLayout";
import Head from "next/head";
import React from "react";
import _ from "lodash";
import { toastInformation } from "@Redux/actions/home";
import { useRouter } from "next/router";

const VerifyContract = () => {
  const dispatch = useDispatch();
  const router = useRouter();
  const { contract, compilers } =
    useSelector((state: any) => state.address) || {};

  const [queryId, $queryId] = React.useState<any | null>("");
  const [selectValue, $selectValue] = React.useState<any | null>({
    address: contract?.address ? contract.address : "",
    contract_name: contract?.contract_name || "",
    compiler_version: contract?.compiler_version || "",
    evm_version: contract?.evm_version || "",
    source_code: contract?.source_code || "",
  });

  const [optimization, setOptimization] = React.useState<any | null>(
    contract?.optimization || true
  );

  React.useEffect(() => {
    const { query } = router;
    if (query?.id) {
      const { id } = query;
      $queryId(id);
    }
  }, [router]);

  React.useEffect(() => {
    if (queryId) {
      dispatch(getContract({ addrHash: queryId }));
    }
  }, [queryId]);

  React.useEffect(() => {
    dispatch(getCompilerList(queryId));
  }, []);

  React.useEffect(() => {
    if (contract) {
      $selectValue({
        ...contract,
      });
    }
  }, [contract]);

  const handleChangeValue = (e: any) => {
    $selectValue({
      ...selectValue,
      [e.target.name]: e.target.value,
    });
  };

  const checkValid = () => {
    return (
      !_.isEmpty(selectValue?.address) &&
      !_.isEmpty(selectValue?.contract_name) &&
      !_.isEmpty(selectValue?.compiler_version) &&
      !_.isEmpty(selectValue?.source_code)
    );
  };

  const handleSubmitForm = (e: any) => {
    e.preventDefault();
    if (checkValid()) {
      let dataSend = {
        address: selectValue.address,
        compiler_version: selectValue.compiler_version,
        contract_name: selectValue.contract_name,
        evm_version: selectValue.evm_version,
        source_code: selectValue.source_code,
        optimization,
      };
      dispatch(verifyContract({ dataSend, router }));
    } else {
      dispatch(
        toastInformation({
          show: true,
          content: "Some field is not correct",
          status: "danger",
        })
      );
    }
  };

  return (
    <div className="container">
      <Head>
        <title>Home - GoChain Explorer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <AppLayout>
        <div className="card">
          <div className="card-body">
            <div className="card-title">
              <img
                src="../../../assets/icons/check-square.svg"
                alt="Verify Contract"
              />
              Contract Verification
            </div>
            <p>Verify and Publish Contract Source Code</p>
            <p>
              If the compiled bytecode matches the Creation Address bytecode,
              the contract is then Verified and will be published online. (to
              build a contract you should either use{" "}
              <a href="https://github.com/gochain-io/web3#build-a-smart-contract">
                web3 tool
              </a>{" "}
              or set the version of the solc compiler in the contract source
              header using a &apos; pragma solidity &apos; tag)
            </p>
            {/* <form [formGroup]="form" (submit)="onSubmit()"> */}
            <form onSubmit={(e) => handleSubmitForm(e)}>
              <div className="form-group">
                <label htmlFor="contarct-address">Contract Address*</label>
                <input
                  type="text"
                  className="form-control"
                  id="contact-address"
                  placeholder="Contract Address"
                  name="address"
                  value={selectValue.address}
                  onChange={(e) => handleChangeValue(e)}
                />
              </div>
              <div className="form-group">
                <label htmlFor="contract-name">
                  Contract Name* (must match a contract from the source)
                </label>
                <input
                  type="text"
                  className="form-control"
                  id="contract-name"
                  placeholder="Contract Name"
                  name="contract_name"
                  value={selectValue?.contract_name}
                  onChange={(e) => handleChangeValue(e)}
                />
              </div>
              <div className="form-group">
                <label htmlFor="compiler">Compiler*</label>
                <select
                  className="form-control"
                  id="compiler"
                  name="compiler_version"
                  onChange={(e) => handleChangeValue(e)}
                >
                  <option value="" disabled selected>
                    Select compiler
                  </option>
                  {compilers?.length > 0 &&
                    compilers.map((compiler: any, index: any) => (
                      <option key={index}>{compiler}</option>
                    ))}
                </select>
              </div>
              <div className="form-group">
                <label htmlFor="evm">EVM</label>
                <select
                  className="form-control"
                  id="evm"
                  name="evm_version"
                  value={selectValue.evm_version}
                  onChange={(e: any) => handleChangeValue(e)}
                >
                  <option value="" selected>
                    Default
                  </option>
                  <option value="homestead">Homestead</option>
                  <option value="tangerineWhistle">Tangerine Whistle</option>
                  <option value="spuriousDragon">Spurious Dragon</option>
                  <option value="byzantium">Byzantium</option>
                  <option value="constantinople">Constantinople</option>
                  <option value="petersburg">Petersburg</option>
                  <option value="istanbul">Istanbul</option>
                </select>
              </div>
              <div className="form-group form-check">
                <input
                  type="checkbox"
                  className="form-check-input"
                  id="optimization"
                  name="optimization"
                  defaultChecked={optimization}
                  value={optimization}
                  onChange={(e) => setOptimization(e.target.checked)}
                />
                <label className="form-check-label" htmlFor="optimization">
                  Optimization*
                </label>
              </div>
              <div className="form-group">
                <label htmlFor="contract-code">Contract Code*</label>
                <textarea
                  className="form-control"
                  id="contract-code"
                  rows={9}
                  name="source_code"
                  value={selectValue?.source_code}
                  onChange={(e) => handleChangeValue(e)}
                ></textarea>
              </div>
              <button type="submit" className="btn btn-primary">
                Verify Contract
              </button>
            </form>
          </div>
        </div>
      </AppLayout>
    </div>
  );
};

export default VerifyContract;
